---
# Variable setup.
#- name: Include OS-Specific variables
#  include_vars: "{{ ansible_os_family }}.yml"

- name: import jenkins-ci.org gpg key
  rpm_key: key='http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key'
  when: ansible_os_family == 'RedHat'
  tags: packages

- name: configure yum repo of jenkins-ci.org
  get_url: url='http://pkg.jenkins.io/redhat/jenkins.repo' dest=/etc/yum.repos.d/jenkins.repo mode=0644
  when: ansible_os_family == 'RedHat'
  tags: packages

- name: install the required packages in RedHat derivatives
  yum: name=jenkins state=present
  when: ansible_os_family == 'RedHat'
  tags: packages

#Setup/install tasks.
#- include: setup-RedHat.yml
#  when: ansible_os_family == 'RedHat'


# Configure Jenkins init settings.
#- include: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: no

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: no

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

# Update Jenkins and install configured plugins.
- include: plugins.yml
